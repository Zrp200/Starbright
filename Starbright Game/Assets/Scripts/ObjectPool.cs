//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System.Collections.Generic;
using UnityEngine;
using System;

public class ObjectPool : MonoBehaviour
{
	public GameObject asteroidPrefab1;
	public GameObject asteroidPrefab2;
	public GameObject asteroidPrefab3;
	public GameObject asteroidPrefab4;
	public GameObject asteroidPrefab5;
	public GameObject farAsteroidPrefab1;
	public GameObject farAsteroidPrefab2;
	public GameObject farAsteroidPrefab3;
	public GameObject farAsteroidPrefab4;
	public GameObject farAsteroidPrefab5;


	private List<GameObject> pool;
	private List<Boolean> isFree;
	private GameObject[] prefabs;
	private GameObject[] farPrefabs;

	void Awake()
	{
		pool = new List<GameObject>();
		isFree = new List<Boolean>();
		prefabs = new GameObject[5] {asteroidPrefab1, asteroidPrefab2, asteroidPrefab3, asteroidPrefab4, asteroidPrefab5};
		farPrefabs = new GameObject[5] {farAsteroidPrefab1, farAsteroidPrefab2, farAsteroidPrefab3, farAsteroidPrefab4, farAsteroidPrefab5};
	}

	void Start()
	{
		// Don't put things here - other classes need to use this class during start, so things need to be set up using Awake()
	}

	void Update()
	{
		//Debug.Log(pool.Count);
	}

	public int addBody(float x, float y, float depth, float mass, bool isFar)
	{
		int nextFree = 0;
		while(nextFree < isFree.Count && !(isFree[nextFree] || !pool[nextFree].activeSelf)) nextFree++;
		if(nextFree == pool.Count)
		{
			GameObject asteroid;
			if(!isFar)
			{
				asteroid = (GameObject)Instantiate(pickAPrefab(prefabs), new Vector3(x, y, depth), Quaternion.identity);
			}
			else
			{
				asteroid = (GameObject)Instantiate(pickAPrefab(farPrefabs), new Vector3(x, y, depth), Quaternion.identity);
			}
			Body asteroidScript = asteroid.GetComponent<Body>();
			asteroidScript.mass = mass;
			pool.Add(asteroid);
			isFree.Add(false);
			return nextFree;
		}
		GameObject a = pool[nextFree];
		a.rigidbody2D.transform.position = new Vector3(x, y, depth);
		SpriteRenderer renderer;
		if(!isFar)
		{
			renderer = pickAPrefab(prefabs).GetComponent<SpriteRenderer>();
		}
		else
		{
			renderer = pickAPrefab(farPrefabs).GetComponent<SpriteRenderer>();
		}
		a.GetComponent<SpriteRenderer>().sprite = renderer.sprite;
		Body aScript = a.GetComponent<Body>();
		aScript.mass = mass;
		a.SetActive(true);
		isFree[nextFree] = false;
		return nextFree;
	}

	public GameObject getBody(int index)
	{
		return pool[index];
	}

	public void removeBody(int index)
	{
		pool[index].SetActive(false);
		isFree[index] = true;
	}

	public void drain()
	{
		for(int i = 0; i < pool.Count; i++) removeBody(i);
	}

	private GameObject pickAPrefab(GameObject[] objs)
	{
		int num = objs.Length;
		int pick = Mathf.FloorToInt(UnityEngine.Random.Range (0, num));
		return objs[pick];
	}

	public void setPoolLayer(int layer)
	{
		for(int i = 0; i < pool.Count; i++) 
			pool[i].layer = layer;
	}

	public void setParent(GameObject parent)
	{
		for(int i = 0; i < pool.Count; i++) 
			pool[i].transform.parent = parent.transform;
	}

	public void setEnableCollisions(bool enable)
	{
		for(int i = 0; i < pool.Count; i++)
			pool[i].rigidbody2D.collider2D.enabled = enable;
	}

	public void setEnabledChildren(bool enabled)
	{
		for (int i=0; i < pool.Count; i++)
		{
			foreach(Transform child in pool[i].transform)
			{
				child.gameObject.SetActive (enabled);
			}
		}
	}

	public void setForegroundImage()
	{
		for(int i=0; i < pool.Count; i++)
		{
			string name = pool[i].name;
			int x = Int32.Parse(name[name.Length - 8] +"");
			Debug.Log(name);
			pool[i].GetComponent<SpriteRenderer>().sprite = prefabs[x - 1].GetComponent<SpriteRenderer>().sprite;
		}
	}

	public void setBackgroundImage()
	{
		for(int i=0; i < pool.Count; i++)
		{
			string name = pool[i].name;
			int x = Int32.Parse(name[name.Length - 12] +"");
			
			pool[i].GetComponent<SpriteRenderer>().sprite = farPrefabs[x - 1].GetComponent<SpriteRenderer>().sprite;
		}
	}

	/*---------------------------------------------
	 * Used during layering up/down only! Removes
	 * objects which overlap with the player 
	 * character.
	 * --------------------------------------------*/
	public void removePCOverlap(CircleCollider2D pc)
	{
		Debug.Log("Get rid of shit");
		for(int i = 0; i < pool.Count; i++)
		{
			if(pc.bounds.Intersects(pool[i].GetComponent<CircleCollider2D>().bounds))
			{
				removeBody(i);
			}
		}

	}
	
}

